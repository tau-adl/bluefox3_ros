#!/usr/bin/env python

# levels -
#  0: can be used when device, capture is active
#  1: can be used when device is active, capture not active

PACKAGE = 'bluefox3'
import roslib
roslib.load_manifest(PACKAGE)
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

ifc = gen.add_group("Image Format Control Parameters")
# region image format
"""ifc_pixel_format_enum = gen.enum([
    gen.const("pfRGB10Packed", str_t, "RGB10Packed", "RGB 10 Packed."),
    gen.const("pfRGB8", str_t, "RGB8", "Red, Green, Blue 8 bit."),
    gen.const("pfBayerGR8", str_t, "BayerGR8", "Bayer Green Red 8 bit."),
], "Device pixel format")"""
ifc.add("ifc_pixel_format", str_t, 1, "Pixel format", "RGB10Packed")
ifc.add("ifc_height", str_t, 1, "Resolution height", "720")
ifc.add("ifc_width", str_t, 1, "Resolution width", "960")
# endregion

acq = gen.add_group("Acquisition Control Parameters")
# region acquisition
acq.add("acq_exposure_time", str_t, 0, "Exposure time (us)", "10000")

"""acq_mode_enum = gen.enum([
    gen.const("amSingleFrame", str_t, "SingleFrame", "One frame is captured."),
    gen.const("amMultiFrame", str_t, "MultiFrame", "he number of frames specified by AcquisitionFrameCount is captured."),
    gen.const("amContinuous", str_t, "Continuous", "Frames are captured continuously until stopped with the AcquisitionStop command."),
], "Acquisition mode")"""
acq.add("acq_mode", str_t, 1, "Acquisition mode", "Continuous")
acq.add("acq_exp_limit_upper", double_t, 0, "Upper limit for auto exposure time", 25000.0)
acq.add("acq_exp_limit_lower", double_t, 0, "Upper limit for auto exposure time", 10000.0)

"""acq_exposure_AECMode_enum = gen.enum([
    gen.const("aeaOff", str_t, "Off", "Exposure duration is user controlled using ExposureTime."),
    gen.const("aeaOnce", str_t, "Once", "Exposure duration is adapted once by the device. Once it has converged, it returns to the Off state."),
    gen.const("aeaContinuous", str_t, "Continuous", "Exposure duration is constantly adapted by the device to maximize the dynamic range."),
    gen.const("aeamvSequenced", str_t, "mvSequenced", "this shit is undocumented, so I dunno what it does"),
], "Automatic exposure methods")"""
acq.add("acq_exposure_AECMode", str_t, 0, "Automatic exposure methods", "Continuous")

"""acq_trigger_selector_enum = gen.enum([
    gen.const("atsAcquisitionStart", str_t, "AcquisitionStart", "Selects a trigger that starts the Acquisition of one or many frames according to AcquisitionMode."),
    gen.const("atsAcquisitionEnd", str_t, "AcquisitionEnd", "Selects a trigger that ends the Acquisition of one or many frames according to AcquisitionMode."),
    gen.const("atsFrameStart", str_t, "FrameStart", "Selects a trigger starting the capture of one frame."),
    gen.const("atsFrameEnd", str_t, "FrameEnd", "Selects a trigger ending the capture of one frame (mainly used in linescan mode)."),
    gen.const("atsExposureStart", str_t, "ExposureStart", "Selects a trigger controlling the start of the exposure of one Frame (or Line)."),
    gen.const("atsExposureEnd", str_t, "ExposureEnd", "Selects a trigger controlling the end of the exposure of one Frame (or Line)."),
], "Trigger selector")"""
acq.add("acq_trigger_selector", str_t, 0, "Trigger selector", "FrameStart")

"""acq_trigger_source_enum = gen.enum([
    gen.const("atsLine4", str_t, "Line4", "Specifies which physical line (or pin) and associated I/O control block to use as external source for the trigger signal."),
    gen.const("atsSoftware", str_t, "Software", "Specifies that the trigger source will be generated by software using the TriggerSoftware command."),
], "Trigger source")"""
acq.add("acq_trigger_source", str_t, 0, "Trigger source", "Software")

"""acq_trigger_mode_enum = gen.enum([
    gen.const("atmOff", str_t, "Off", "Disables the selected trigger."),
    gen.const("atmOn", str_t, "On", "Enable the selected trigger."),
], "Trigger enable/disable")"""
acq.add("acq_trigger_mode", str_t, 0, "Trigger enable/disable", "Off")

"""acq_trigger_activation_enum = gen.enum([
    gen.const("ataRisingEdge", str_t, "RisingEdge", "Specifies that the trigger is considered valid on the rising edge of the source signal."),
    gen.const("ataFallingEdge", str_t, "FallingEdge", "Specifies that the trigger is considered valid on the falling edge of the source signal."),
    gen.const("ataAnyEdge", str_t, "AnyEdge", "Specifies that the trigger is considered valid on the falling or rising edge of the source signal."),
], "Trigger activation mode")"""
acq.add("acq_trigger_activation", str_t, 0, "Trigger activation mode", "AnyEdge")
# endregion

mm = gen.add_group("Mirroring Parameters")
# region mirroring
mm.add("mm_TopDown", bool_t, 0, "Top-down mirroring", False)
mm.add("mm_LeftRight", bool_t, 0, "Left-right mirroring", False)
# endregion

dest = gen.add_group("Image Destination Parameters")
# region image destination
"""dest_pixel_format_enum = gen.enum([
    gen.const("dpfAuto", str_t, "Auto", "The driver will decide which destination format will be used."),
    gen.const("dpfRaw", str_t, "Raw", "The image will be transferred as an unprocessed block of data."),
    gen.const("dpfMono8", str_t, "Mono8", "The image will be transferred as a mono channel 8 bit per pixel image."),
], "Destination pixel format")"""
dest.add("dest_pixel_format", str_t, 1, "Pixel format", "Auto")
# endregion
exit(gen.generate(PACKAGE, "bluefox3", "Bluefox3"))
